{"name": "Register user", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.LocationParseError: Failed to parse: https://user1@:1234selenoid.autotests.cloud/wd/hub/session", "trace": "@pytest.fixture\n    def browser_setup():\n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": \"100.0\",\n            \"selenoid:options\": {\"enableVNC\": True, \"enableVideo\": False},\n        }\n        options.capabilities.update(selenoid_capabilities)\n>       driver = webdriver.Remote(\n            command_executor=\"https://user1@:1234selenoid.autotests.cloud/wd/hub\", options=options\n        )\n\nconftest.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:272: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:364: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:344: in execute\n    return self._request(command_info[0], url, body=data)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:366: in _request\n    response = self._conn.request(method, url, body=body, headers=headers)\n..\\venv\\lib\\site-packages\\urllib3\\request.py:78: in request\n    return self.request_encode_body(\n..\\venv\\lib\\site-packages\\urllib3\\request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n..\\venv\\lib\\site-packages\\urllib3\\poolmanager.py:362: in urlopen\n    u = parse_url(url)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'https://user1@:1234selenoid.autotests.cloud/wd/hub/session'\n\n    def parse_url(url):\n        \"\"\"\n        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n        performed to parse incomplete urls. Fields not provided will be None.\n        This parser is RFC 3986 and RFC 6874 compliant.\n    \n        The parser logic and helper functions are based heavily on\n        work done in the ``rfc3986`` module.\n    \n        :param str url: URL to parse into a :class:`.Url` namedtuple.\n    \n        Partly backwards-compatible with :mod:`urlparse`.\n    \n        Example::\n    \n            >>> parse_url('http://google.com/mail/')\n            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n            >>> parse_url('google.com:80')\n            Url(scheme=None, host='google.com', port=80, path=None, ...)\n            >>> parse_url('/foo?bar')\n            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n        \"\"\"\n        if not url:\n            # Empty\n            return Url()\n    \n        source_url = url\n        if not SCHEME_RE.search(url):\n            url = \"//\" + url\n    \n        try:\n            scheme, authority, path, query, fragment = URI_RE.match(url).groups()\n            normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES\n    \n            if scheme:\n                scheme = scheme.lower()\n    \n            if authority:\n                auth, _, host_port = authority.rpartition(\"@\")\n                auth = auth or None\n                host, port = _HOST_PORT_RE.match(host_port).groups()\n                if auth and normalize_uri:\n                    auth = _encode_invalid_chars(auth, USERINFO_CHARS)\n                if port == \"\":\n                    port = None\n            else:\n                auth, host, port = None, None, None\n    \n            if port is not None:\n                port = int(port)\n                if not (0 <= port <= 65535):\n                    raise LocationParseError(url)\n    \n            host = _normalize_host(host, scheme)\n    \n            if normalize_uri and path:\n                path = _remove_path_dot_segments(path)\n                path = _encode_invalid_chars(path, PATH_CHARS)\n            if normalize_uri and query:\n                query = _encode_invalid_chars(query, QUERY_CHARS)\n            if normalize_uri and fragment:\n                fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)\n    \n        except (ValueError, AttributeError):\n>           return six.raise_from(LocationParseError(source_url), None)\nE           urllib3.exceptions.LocationParseError: Failed to parse: https://user1@:1234selenoid.autotests.cloud/wd/hub/session\n\n..\\venv\\lib\\site-packages\\urllib3\\util\\url.py:397: LocationParseError"}, "start": 1681556696413, "stop": 1681556696413, "uuid": "aaebeb76-307e-4248-be38-630e07b553e2", "historyId": "f5898227e77a5c75d73f2fe88cc82a1a", "testCaseId": "ea41675373c96179a78be0f925a34b16", "fullName": "tests.test_demo_qa#test_fill_fields", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_demo_qa"}, {"name": "host", "value": "DESKTOP-L9T0ETO"}, {"name": "thread", "value": "22720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demo_qa"}]}